apply plugin: 'jacoco'

def isAndroidModule(Project project) {
    return project.pluginManager.hasPlugin("com.android.application") || project.pluginManager.hasPlugin("com.android.library")
}

def isJavaModule(Project project) {
    return project.pluginManager.hasPlugin("java")
}

afterEvaluate { project ->
    if (isAndroidModule(project)) {
        setupAndroidReporting(project)
    } else {
        setupKotlinReporting()
    }
}

def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn test
        reports {
            csv.enabled false // change if needed
            xml.enabled false // change if needed
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
        afterEvaluate {
            classDirectories.from = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        // dagger
                        '**/*_MembersInjector.class',
                        '**/Dagger*Component.class',
                        '**/Dagger*Component$Builder.class',
                        '**/Dagger*Subcomponent*.class',
                        '**/*Subcomponent$Builder.class',
                        '**/*Module_*Factory.class',
                        '**/di/module/*',
                        '**/*_Factory*.*',
                        '**/*Module*.*',
                        '**/*Dagger*.*',
                        '**/*Hilt*.*',
                ])
            })
        }
    }
}

def setupAndroidReporting(Project project) {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    Task deleteCoverageReport = project.tasks.create(name: "deleteCoverageReport", type: Delete) {
        def reportPath = "${buildDir}/coverage-report}"
        println("delete reportPath = " + reportPath)
        delete reportPath
    }


    List<Task> allDependTask = new ArrayList<>()
    allDependTask.add(deleteCoverageReport)
    allDependTask.add(project.tasks.findByName("testDebugUnitTest"))
    allDependTask.add(project.tasks.findByName("connectedDebugAndroidTest"))

    project.tasks.create(name: "testCoverage", type: JacocoReport, dependsOn: allDependTask, group: "xingyun_test") {
        println "[task.testCoverage] create"

        def fileFilter = [
                // data binding
                'android/databinding/**/*.class',
                '**/android/databinding/*Binding.class',
                '**/android/databinding/*',
                '**/androidx/databinding/*',
                '**/BR.*',
                // android
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                // dagger
                '**/*_MembersInjector.class',
                '**/Dagger*Component.class',
                '**/Dagger*Component$Builder.class',
                '**/Dagger*Subcomponent*.class',
                '**/*Subcomponent$Builder.class',
                '**/*Module_*Factory.class',
                '**/di/module/*',
                '**/*_Factory*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                // kotlin
                '**/*MapperImpl*.*',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/*Component*.*',
                '**/*BR*.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.*',
                '**/*Companion*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                '**/*MembersInjector*.*',
                '**/*_MembersInjector.class',
                '**/*_Factory*.*',
                '**/*_Provide*Factory*.*',
                '**/*Extensions*.*',
                // sealed and data classes
                '**/*$Result.*',
                '**/*$Result$*.*',
                // adapters generated by moshi
                '**/*JsonAdapter.*',
        ]

        def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
        def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
        classDirectories.from = files([javaTree], [kotlinTree])
        executionData.from = fileTree("$project.projectDir", {
            includes = ['**/*.exec', '**/*coverage.ec']
        }).files

        def coverageSourceDirs = ["src/main/java"]
        sourceDirectories.setFrom(files(coverageSourceDirs))
        additionalSourceDirs.setFrom(files(coverageSourceDirs))
        reports {
            csv.enabled false // change if needed
            xml.enabled false // change if needed
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
    }

}